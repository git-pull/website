name: Publish Site

on:
  push:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10' ]
    steps:
    - uses: actions/checkout@v3

    - name: Filter changed file paths to outputs
      uses: dorny/paths-filter@v2.7.0
      id: changes
      with:
        filters: |
          root_docs:
            - CHANGES
            - README.*
          docs:
            - '**/*.rst'
            - '**/*.css'
            - '**/*.md'
          python_files:
            - '*.py'
            - pyproject.toml
            - poetry.lock
            - .github/workflows/*

    - name: Should publish
      if: steps.changes.outputs.docs == 'true' || steps.changes.outputs.root_docs == 'true' || steps.changes.outputs.python_files == 'true'
      run: echo "PUBLISH=$(echo true)" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      if: env.PUBLISH == 'true'
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
          
    - name: Get full Python version
      if: env.PUBLISH == 'true'
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      if: env.PUBLISH == 'true'
      run: |
        curl -O -sSL https://install.python-poetry.org/install-poetry.py
        python install-poetry.py -y --version 1.1.14
        echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
        rm install-poetry.py

    - name: Add ~/.local/bin to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Get poetry cache paths from config
      if: env.PUBLISH == 'true'
      run: |
        echo "poetry_cache_dir=$(poetry config --list | sed -n 's/.*cache-dir = //p' | sed -e 's/^\"//' -e 's/\"$//')" >> $GITHUB_ENV
        echo "poetry_virtualenvs_path=$(poetry config --list | sed -n 's/.*virtualenvs.path = .* # //p' | sed -e 's/^\"//' -e 's/\"$//')" >> $GITHUB_ENV

    - name: Configure poetry
      if: env.PUBLISH == 'true'
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      if: env.PUBLISH == 'true'
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          .venv
          {{ env.poetry_cache_dir }}
          {{ env.poetry_virtualenvs_path }}
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Upgrade pip
      if: env.PUBLISH == 'true'
      shell: bash
      run: poetry run python -m pip install pip -U

    - name: Install dependencies [w/ docs]
      if: env.PUBLISH == 'true'
      run: poetry install --extras "docs"

    - name: Build documentation
      if: env.PUBLISH == 'true'
      run: |
        make html
        cp manifest.json _build/html

    - name: Push documentation to S3
      if: env.PUBLISH == 'true'
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-west-1'   # optional: defaults to us-east-1
        SOURCE_DIR: '_build/html'      # optional: defaults to entire repository 

    - name: Purge cache on Cloudflare
      uses: jakejarvis/cloudflare-purge-action@v0.3.0
      env:
        CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
        CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
